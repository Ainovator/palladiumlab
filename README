Тестовое задание для palladiumlab

Описание структуры:
1. Для запуска потребуется Docker, docker-compose. В репозитории лежит файл yml, в нём настроены все маппингы портов и папок проекта. Весь пакет файлов доступен в репозитории;
2. В проекте также есть настроенный env файл для передачи параметров окружения внутрь контейнеров;
3. Docker файл проекта построен на базовом img php:8.0.2-fpm;
4. Nginx настроен для локального запуска на внешнем порту 8080 и внутреннем порту контейнера 80 (убедитесь что порт доступен в вашей системе, либо замените в yml файле внешний порт);
4. phpmyadmin запускается на порту 8081 (убедитесь что порт доступен в вашей системе, либо замените в yml файле внешний порт);
5. mysql запускается на порту 3306 (убедитесь что порт доступен в вашей системе, либо замените в yml файле внешний порт);

Порядок запуска:
1. Скачайте проект с GitHub командой (gitclone git@github.com:Ainovator/palladiumlab.git);
2. Выполните команду docker-compose up -- build -d (флаг -d для освобождения терминала после запуска, либо без флага для просмотра логов контейнеров);
3. Выполните команду docker exec -it pl-app composer install ( для инициализации vendor внутри контейнера );
4. Выполните команду docker exec -it pl-app composer dump-autoload (для построения автозагрузки классов внутри проекта );
5. Выполните команлу docker exec -it pl-app php Migrations/migrate.php (это команда создаст таблицы в базе данных );
6. Зайдите в браузер по адресу http://localhost:8080 (выполнится скрипт находящийся в index.php, входной точки проекта, на него указывает nginx);
7. Также есть контейнер phpadmin, который располагается по адресу http://localhost:8081 - (здесь можно детально ознакомится со структурой базы данных);

Структура проекта и классов:
1. Config/db.php - здесь находится файл параметров подключения к базе данных, который забирает параметры из окружения;
2. Core/Database/DatabaseConnection - Singleton класс подключения к базе данных;

3. Migrations/ - здесь располагаются классы описываюшие структуру таблиц в базе данных;
4. Migrations/migrate.php - файл для создания таблиц в базе данных;

5. Models/ORM/Executor - класс отвечающий за выполнение запросов к базе данных на основании переданной строки запроса и параметров
6. Models/ORM/Base - абстрактный класс в котором я попытался создать цепочную структуру запросов к базе данных. Да, класс перенасыщен ответственностью, но в силу упрощения и ограничения времени оставил так.
7. Models/ORM/Builder - класс, который я в бущуем буду использовать как объект инкапсуляции запросов, параметров и результатов.

8. Models/Roles - наследуется от Base, класс для работы с таблицей ролей для пользователей
9. Models/Users - наследуется от Base, класс для работы с таблицей пользователей
10. Models/UsersRoles - наследуется от Base, класс для работы соединения ролей и пользователей

11. public/index.php входной файл для проекта

12. Traits/SQLValidator трейт для валидации sql запросо
12. Traits/RandomGeneratir создавался в начале для быстрого заполнения данными таблиц
13. Trauts/QueryConstructor трейт на будущее для составления более сложных и много функциональных запросов

